summary(mod3)
summary(mod1)
summary(mod2)
summary(mod3)
setwd("D:/R/Love2ShareClub")
dir
ls()
air.quality <- read.csv("air_quality.csv")
View(air.quality)
View(air.quality)
?read.csv
air.quality <- read.csv("air_quality.csv",fileEncoding = "GBK")
View(air.quality)
air.quality <- read.csv("air_quality.csv",fileEncoding = "GB2312")
View(air.quality)
air.quality <- read.csv("air_quality.csv",fileEncoding = "GB2312",encoding = "utf-8")
View(air.quality)
air.quality <- read.csv("air_quality.csv",fileEncoding = "GB2312",encoding = "GB2312")
View(air.quality)
air.quality <- read.csv("air_quality.csv",fileEncoding = "GB2312",encoding = "GB2312")
View(air.quality)
air.quality <- read.csv("air_quality.csv",fileEncoding = "GB2312")
View(air.quality)
air.quality <- read.csv("air_quality.csv")
View(air.quality)
air.quality <- read.csv("air_quality.csv",encoding="GB2312")
View(air.quality)
air.quality <- read.csv("air_quality.csv")
View(air.quality)
getwd()
dir()
getwd()
data <- read.csv("./58/jingrong.csv")
data <- read.csv("/58/jingrong.csv")
dir
dir()
data <- read.csv("/58/jinrong.csv")
data <- read.csv("./58/jinrong.csv")
data <- read.csv("./58/jinrong.csv",header = FALSE)
View(data)
fix(data)
?read.csv
data <- read.csv("./58/jinrong.csv",header = FALSE,encoding="utf8")
data <- read.csv("./58/jinrong.csv",header = FALSE,encoding="UTF8")
data <- read.csv("./58/jinrong.csv",header = FALSE,encoding="UTF-8")
View(data)
data <- read.csv("./58/jinrong.csv",header = FALSE,encoding="UTF-8",sep = |)
data <- read.csv("./58/jinrong.csv",header = FALSE,encoding="UTF-8",sep = "|")
data <- read.csv("./58/jinrong2.csv",header = FALSE,encoding="UTF-8",sep = "|")
data <- read.csv("./58/jinrong2.csv",header = FALSE,encoding="UTF-8")
data <- read.csv("./58/jinrong2.csv",header = FALSE,encoding="UTF-8",sep = "|")
data <- read.csv("./58/jinrong2.csv",header = FALSE,encoding="UTF-8",sep = ":")
View(data)
data <- read.csv("./58/jinrong2.csv",header = FALSE,encoding="UTF-8",sep = "：")
data <- read.csv("./58/jinrong2.csv",header = FALSE,encoding="UTF-8",sep = "\")
)
\
\\
;
.
data<-read.table("jinrong2.csv",sep=',',header=F, stringsAsFactors=FALSE, encoding = "UTF-8")
data<-read.table("./58/jinrong2.csv",sep=',',header=F, stringsAsFactors=FALSE, encoding = "UTF-8")
data<-read.csv("./58/jinrong2.csv",sep=',',header=F, stringsAsFactors=FALSE, encoding = "UTF-8")
View(data)
mode(data[1])
info=strsplit((data$V1),"\\|")
name <- sapply(info, "[", 1)
gender <- sapply(info, "[", 2)
age<-sapply(info,"[", 3)
exp<-sapply(info,"[", 4)
edu<-sapply(info,"[", 5)
data <- cbind(name, gender,age,exp,edu,data[,-1])
View(data)
data$expectoccupation<-gsub(pattern="\\：",replacement="",data$V4) #chinese maohao.
View(data)
data<-read.csv("./58/jinrong2.csv",sep=',',header=F, stringsAsFactors=FALSE, fileEncoding = "UTF-8")
mode(data[1])
info=strsplit((data$V1),"\\|")
name <- sapply(info, "[", 1)
gender <- sapply(info, "[", 2)
age<-sapply(info,"[", 3)
exp<-sapply(info,"[", 4)
edu<-sapply(info,"[", 5)
data <- cbind(name, gender,age,exp,edu,data[,-1])
data$expectoccupation<-gsub(pattern="\\：",replacement="",data$V4) #chinese maohao.
View(data)
Treatment <- c("Control", "Asprin 10mg/day", "Asprin 50mg/day",
"Asprin 100mg/day", "Acetomycin 100mg/day",
"Acetomycin 1000mg/day")
sort(Treatment)
require(gtools)
mixedsort(Treatment)
cha2fac <- as.factor(c("4","8","10","15"))
as.numeric(cha2fac)
as.numeric(as.character(cha2fac))
type(a)
type(x)
class(x)
plot(seq(1:10),y=10*rnorm(1))
plot(seq(1:10),y=10*rnorm(10))
plot(seq(1:10),y=10*rnorm(10),ylim = range(y)+2)
x <- seq(1:10)
y <- 10*rnorm(10)
plot(x,y,ylim = range(y)+2)
set.seed(1000)
y <- 10*rnorm(10)
plot(x,y,ylim = range(y)+2)
x <- seq(1:10)
set.seed(1101)
y <- 10*rnorm(10)
plot(x,y,ylim = range(y)+2)
plot(x,y)
plot(x,y,ylim = range(y)+3)
plot(x,y)
plot(x,y)
plot(x,y,ylim = range(y)+3)
plot(x,y,ylim = range(y))
plot(x,y)
plot(x,y,ylim = 1.1*range(y))
plot(x,y)
x <- seq(1:10)
set.seed(1101)
y <- exp(10*rnorm(10))
plot(x,y,ylim = 1.1*range(y))
plot(x,y,ylim = 1.1*range(y),log = "y")
x <- seq(1:10)
set.seed(1101)
y <- 10*rnorm(10)
plot(x,y,ylim = 1.1*range(y))
plot(x,y)
plot(x,y,ylim = 1.25*range(y))
plot(x,y)
plot(x,y,ylim = 1.25*range(y))
plot(x, y, las = 1)
plot(x, y, las = 0)
plot(x, y, las = 1)
plot(x, y, las = 2)
memory.limit(size=2500)
memory.limit()
memory.limit( 4000)
alarm()
alarm()
?alarm
Sys.sleep(5)
for(i in 1:5){
alarm()
Sys.sleep(0.5)
}
for(i in 1:5){
alarm()
Sys.sleep(i)
}
options(error = alarm)}
for (i in 1:5) {
alarm()
Sys.sleep(0.5)
}
options(error = alarm)
stop("!!!")
stop("!!!")
for (i in 1:5) {
alarm()
Sys.sleep(0.5)
}
for (i in 1:5) {
alarm()
Sys.sleep(5)
}
for (i in 1:5) {
alarm()
Sys.sleep(5)
}
a
# 10.eval(parse(text=paste("a <- 10"))) will create a new variable 'a' and
#    assign value 10 to it. It executes your strings as if they are R statements.
eval(parse(text=paste("a <- 10")))
a
sessionInfo()
adist("hello world","hello wolrdx")
adist("hello world","hello wordx")
Sys.getpid()
summary(mtcars)
quantile(mtcars)
quantile(mtcars$mpg)
quantile(mtcars$mpg)
y <- quantile(mtcars$mpg)
unname(y)
x <- c(1, 2)
x <- c(1, 2)
y <- as.vector(x)
identical(x,y)
y <- cbind(as.vector(x),3)
identical(x,y)
all.equal(x, y)
x <- c(1, 2)
y <- as.vector(x)
identical(x, y)
all.equal(x, y)
y2 <- cbind(y,3)
all.equal(x, y2)
y2
y2 <- rbind(y, 3)
all.equal(x, y2)
y2
y2 <- r(y, 3)
all.equal(x, y2)
y2 <- c(y, 3)
all.equal(x, y2)
y2
R.utils
?utils
?R.utils
library(utils)
?withTimeOut
??withTimeOut
?withTimeut
?withTimeout
??withTimeout
install.packages("R.utils")
require(R.utils)
?withTimeout
character(20)
x <- matrix(seq(1:20), ncol = 4)
x
dist(1,2)
?dist
dist(x)
x <- matrix(seq(1:20), ncol = 4, byrow = FALSE)
x
x <- matrix(seq(1:20), ncol = 4, byrow = TRUE)
x
dist(x)
x <- matrix(seq(1:20), ncol = 4, byrow = FALSE)
dist(x)
dist(x, method = "euclidean", diag = TRUE, upper = TRUE)
dist(x, method = "euclidean", diag = FALSE, upper = TRUE)
dist(x, method = "euclidean", upper = TRUE)
x <- c(seq(1:5), seq(1:10,by = 2))
x <- c(seq(1:5), seq(from = 1, to = 10, by = 2))
x
diff(x)
diff(x,2)
diff(x, 2)
lag(x, 2)
lag(x)
1e-5
options(scipen=999)
1e-5
setClass(Ethan)
setClass("Ethan")
setas(1,"Ethan")
setAs(1,"Ethan")
x <- c("a", "b", "c")
assign(x, 10)
a
b
my.Matrix <- matrix(1:20, ncol = 4)
dim(my.Matrix)
cat("\014")
dir()
dir("D:\R")
dir("D:\\R")
dir("D:/R")
dir("./58/")
dir("Finance")
my.Factor <- c("First","Second","Third",NA)
new.Factor <- as.factor(my.Factor)
new.Factor
levels(new.Factor)
levels(new.Factor) <-c(levels(new.Factor), "UNKNOWN")
new.Factor
my.Factor <- as.factor(c("First","Second","Third",NA))
my.Factor
my.Factor <- as.factor(c("First", "Second", "Third", NA))
levels(my.Factor) <-c(levels(my.Factor), "UNKNOWN")
my.Factor
lapply(c("dplyr", "tidyr"), require, character.only = T)
lapply(c("dplyr", "tidyr"), require)
lapply(c("dplyr", "tidyr"), require, character.only = T)
?character.only
??character.only
x <- seq(1:10)
rev(x)
mtcars
new.df <- mtcars
new.df
nrow(new.df)
new.df$mpg[new.df$disp > 200] <- NA
new.df
complete.cases(new.df)
new.df[complete.cases(new.df)]
new.df[complete.cases(new.df),]
nrow(mtcars)
mtcars$mpg[mtcars$disp > 200] <- NA
new.df <- df[complete.cases(mtcars),]
new.df <- mtcars[complete.cases(mtcars),]
nrow(new.df)
new.df
mtcars
mtcars2 <- mtcars[complete.cases(mtcars),]
mtcars2
file.create(hello)
file.create("hello")
file.create("hello/")
file.path("./hello/")
file.remove("hello")
file.create("tempfile.R")
file.create("tempfile.R")
file.remove("tempfile.R")
mod <- lm(price ~ mpg, mtcars)
mod <- lm(price ~ mpg, data = mtcars)
mtcars
mod <- lm(wt ~ disp + cyl, data = mtcars)
unclass(mod)
class(mod)
unclass(summary(mod))
summary(mod)
dir()
data <- read.csv("ordersort.csv")
View(data)
data[sort(data$mktval),]
sort(data$mktval)
order(data$mktval)
data[order(data$mktval),]
mtcars
mtcars[sort(mtcars$carb, mtcars$hp), ]
mtcars[order(mtcars$carb, mtcars$hp), ]
model.matrix(~as.factor(mtcars$carb)+0)
NROW(c(1,2,3))
commandArgs(plot)
commandArgs()
library(help = dplyr)
library(help = AER)
install.packages("AER")
library(help = "AER")
get("x")
x <- c(1,2,3)
get("x")
x
install.packages("plotly")
devtools::install_github("ropensci/plotly")
install.packages("devtools")
devtools::install_github("ropensci/plotly")
install.packages("Rtools")
devtools::install_github("ropensci/plotly")
install.packages("Rcpp")
devtools::install_github("ropensci/plotly")
install.packages("Rcpp")
fy <- c(2010,2011,2012,2010,2011,2012,2010,2011,2012)
company <- c(“Apple”,”Apple”,”Apple”,”Google”,”Google”,”Goo
company <- c("Apple","Apple","Apple","Google","Google","Goo
revenue <- c(65225,108249,156508,29321,37905,50175,62484,69
profit <- c(14013,25922,41733,8505,9737,10737,18760,23150,1
companiesData <- data.frame(fy, company, revenue, profit)
fy <- c(2010,2011,2012,2010,2011,2012,2010,2011,2012)
company <- c("Apple","Apple","Apple","Google","Google","Google","Microsoft","Microsoft","Microsoft")
revenue <- c(65225,108249,156508,29321,37905,50175,62484,69
revenue <- c(65225,108249,156508,29321,37905,50175,62484,69943,73723)
fy <- c(2010,2011,2012,2010,2011,2012,2010,2011,2012)
company <- c("Apple","Apple","Apple","Google","Google","Google","Microsoft","Microsoft","Microsoft")
revenue <- c(65225,108249,156508,29321,37905,50175,62484,69943,73723)
profit <- c(14013,25922,41733,8505,9737,10737,18760,23150,16978)
companiesData <- data.frame(fy, company, revenue, profit)
View(companiesData)
str(companiesData)
companiesData$fy <- factor(companiesData$fy, ordered = TRUE)
str(companiesData)
companiesData$margin <- (companiesData$profit/companiesData$revenue)*100
companiesData$margin <- round(companiesData$margin, 1)
companiesData$sums <- apply(companiesData[,c("revenue","profit")], 1, function (x) sum(x))
companiesData$margin <- apply(companiesData[, c("revenue","profit")], 1, function(x) {(x[2]/x[1])*100})
require(dplyr)
companiesData <- mutate(companiesData, margin = round((profit/revenue)*100, 1))
install.packages("plyr")
require(plyr)
highestProfitMargin <- ddplyr(companiesData, "company", summerize, bestMargin = max(margin))
require(plyr)
highestProfitMargin <- ddplyr(companiesData, "company", summerize, bestMargin = max(margin))
highestProfitMargin <- ddply(companiesData, "company", summerize, bestMargin = max(margin))
highestProfitMargin <- ddply(companiesData, "company", summarize, bestMargin = max(margin))
View(highestProfitMargin)
highestProfitMargin <- ddply(companiesData, "company", transform, bestMargin = max(margin))
myResults <- ddply(companiesData, "company", transform, bestMargin = max(margin), lowestmargin = min(margin))
View(myResults)
highestProfitMargin <- ddply(companiesData, "company", function(x) x[x$margin == max(x$margin), ])
myResults <- companiesData %>%
group_by(company) %>%
mutate(highestMargin = max(margin), lowestMargin = min(margin))
View(myResults)
myResults <- companiesData %>%
group_by(company) %>%
mutate(highestMargin = max(margin), lowestMargin = min(margin))
companiesData
myResults <- companiesData %>%
group_by(company) %>%
summarise(highestMargin = max(margin), lowestMargin = min(margin))
View(myResults)
myResults <- companiesData %>%
group_by(company) %>%
summarise(highestMargin = max(margin), lowestMargin = min(margin))
myResults <- companiesData
myResults
myResults <- companiesData %>%
group_by(company) %>%
summarise(highestMargin = max(margin))
str(companiesData$company)
detach(plyr)
detach("plyr")
companiesData
companyOrder <- order(companiesData$margin)
companiesOrdered <- companiesData[companyOrder,]
View(companiesOrdered)
View(companiesOrdered)
companiesOrdered <- companiesData[-companyOrder,]
companiesOrdered <- companiesData[companyOrder,]
companyOrder <- order(-companiesData$margin)
companiesOrdered <- companiesData[companyOrder,]
View(companiesOrdered)
getwd()
ls
ls()
fy <- c(2010,2011,2012,2010,2011,2012,2010,2011,2012)
company <- c("Apple","Apple","Apple","Google","Google","Google","Microsoft","Microsoft","Microsoft")
revenue <- c(65225,108249,156508,29321,37905,50175,62484,69943,73723)
profit <- c(14013,25922,41733,8505,9737,10737,18760,23150,16978)
companiesData <- data.frame(fy, company, revenue, profit)
View(companiesData)
View(companiesData)
companiesData$margin <- (companiesData$profit/companiesData$revenue)*100
install.packages("reshape2")
library("reshape2", lib.loc="G:/Program Files/R-3.2.1/library")
longData <- melt(companiesData,id.vars = c("fy","company"))
View(longData)
companiesLong <- melt(companiesData, id.vars = c("fy", "company"), measure.vars = c("revenue", "profit", "margin"), variable.name = "FinancialCatagory", value.name = "amount")
View(companiesLong)
companiesWide <- dcast(companiesLong, fy + company ~ FinancialCatagory)
companiesWide <- dcast(companiesLong, fy + company ~ FinancialCatagory, value.var = "amount")
View(companiesWide)
cat("O4E")
cat("\014")
require(xlsx)
install.packages("xlsx")
install.packages("xlsx")
install.packages("xlsx")
require(xlsx)
install.packages("rJava")
install.packages("readxl")
require(readxl)
setwd("E:\Sola\Git\Love2Share\HalfMonthProb\6.A_stock_market")
setwd("E:\\Sola\\Git\\Love2Share\\HalfMonthProb\\6.A_stock_market")
FirstTable  <- read_excel("dataset.xlsx", 1)
View(FirstTable)
SecondTable  <- read_excel("dataset.xlsx", 2)
View(SecondTable)
require(dplyr)
?left_join
MainTable <- left_join(FirstTable, SecondTable, by = c("S_INFO_WINCODE" = "s_info_wincode")
)
MainTable <- left_join(FirstTable, SecondTable, by = c("S_INFO_WINDCODE" = "s_info_windcode"))
View(MainTable)
SecondTable <- SecondTable[,2:3]
FirstTable  <- read_excel("dataset.xlsx", 1)
SecondTable  <- read_excel("dataset.xlsx", 2)[,2:3]
FirstTable  <- read_excel("dataset.xlsx", 1)[,-1]
SecondTable  <- read_excel("dataset.xlsx", 2)[,-1]
MainTable <- left_join(FirstTable, SecondTable, by = c("S_INFO_WINDCODE" = "s_info_windcode"))
View(MainTable)
MainTable <- left_join(FirstTable, SecondTable, by = c("S_INFO_WINDCODE" = "s_info_windcode"))
ThirdTable <- read_excel("dataset.xlsx", 3)
View(ThirdTable)
ThirdTable <- read_excel("dataset.xlsx", 3)[, -1]
View(MainTable)
MainTable <- left_join(FirstTable, ThirdTable)
View(MainTable)
Table1 <- left_join(FirstTable, SecondTable, by = c("S_INFO_WINDCODE" = "s_info_windcode"))
MainTable <- left_join(Table1, ThirdTable)
View(MainTable)
FirstTable  <- read_excel("dataset.xlsx", 1)[,-1]
SecondTable  <- read_excel("dataset.xlsx", 2)[,-1]
ThirdTable <- read_excel("dataset.xlsx", 3)[, -1]
FirstTable  <- read_excel("dataset.xlsx", 1)[,-1]
SecondTable  <- read_excel("dataset.xlsx", 2)[,-1]
ThirdTable <- read_excel("dataset.xlsx", 3)[, -1]
View(ThirdTable)
Table1 <- left_join(FirstTable, SecondTable, by = c("S_INFO_WINDCODE" = "s_info_windcode"))
View(Table1)
View(ThirdTable)
View(ThirdTable)
MainTable <- left_join(Table1, ThirdTable)
View(MainTable)
MainTable <- inner_join(Table1, ThirdTable)
MainTable <- inner_join(Table1, ThirdTable)
View(ThirdTable)
STstock <- ThirdTable %>%
mutate("ST" %in% S_INFO_NAME)
View(STstock)
STstock <- ThirdTable %>%
mutate(grep("ST", S_INFO_NAME, ignore.case = FALSE, fixed = TRUE))
STstock <- ThirdTable %>%
mutate(grepl("ST", S_INFO_NAME))
STstock <- ThirdTable %>%
mutate(st = grepl("ST", S_INFO_NAME)) %>%
group_by(S_INFO_WINDCODE) %>%
summarise(st_tag = max(st))
Table1 <- left_join(FirstTable, SecondTable, by = c("S_INFO_WINDCODE" = "s_info_windcode"))
MainTable <- left_join(Table1, STstock)
FinalResult <- MainTable %>%
mutate(status = (S_PCT_CHG >= (9.8 - 4.9*st_tag))*1 + (S_PCT_CHG <= -9.8 + 4.9*st_tag)*-1)
View(FinalResult)
cat("01e")
cat("014")
cat("\014")
